library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.all;

entity bloquejugos is
	port(data: in std_logic_vector(9 downto 0);
	modo,enable,reset: in std_logic;
	q1,q2,q3,q4,q5,q6,q7,q8,q9,q10: out std_logic_vector(7 downto 0));
end ram;
architecture sol of bloquejugos is
signal r1,r2,r3,r4,r5,r6,r7,r8,r9,r10: std_logic_vector(7 downto 0);
begin
	PROCESS(clock,reset)
		BEGIN
		if reset='0' then 
				r1<="10100";
				r2<="10100";
				r3<="10100";
				r4<="10100";
				r5<="10100";
				r6<="10100";
				r7<="10100";
				r8<="10100";
				r9<="10100";
				r10<="10100";
		elsif (clock'event and clock='1') then
			process(add)
				begin
					case add is
						when "0000000001" => q1<=r1-1;
						when "0000000010" => q2<=r2-1;
						when "0000000100" => q3<=r3-1;
						when "0000001000" => q4<=r4-1;
						when "0000010000" => q5<=r5-1;
						when "0000100000" => q6<=r6-1;
						when "0001000000" => q7<=r7-1;
						when "0010000000" => q8<=r8-1;
						when "0100000000" => q9<=r9-1;
						when "1000000000" => q10<=r10-1;
					end case;
		end if;
	end process;
end sol;